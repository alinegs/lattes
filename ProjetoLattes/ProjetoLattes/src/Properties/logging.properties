
############################################################
#    Arquivo de Configura\u00E7\u00E3o de Logs
#
# java.util.logging.config.file
# Por exemplo java -Djava.util.logging.config.file=myfile
############################################################

############################################################
#                Global properties
############################################################

# "handlers" especifica uma lista de classes Handler separadas
# por v\u00EDrgulas. Estes handlers ser\u00E3o instalados durante a
# inicializa\u00E7\u00E3o da m\u00E1quina virtual Java (JVM).
#
# A linha abaixo mostra um exemplo adicionando a gera\u00E7\u00E3o de logs em arquivo
# usando um FileHandler.
#
# As classes handler dispon\u00EDveis s\u00E3o:
# ConsoleHandler
# FileHandler
# MemoryHandler
# SocketHandler
# StreamHandler
handlers = java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# N\u00EDvel de log default.
# Especifica quais os tipos de eventos ser\u00E3o logados.
# Qualquer n\u00EDvel atribu\u00EDdo na se\u00E7\u00E3o "Propriedades espec\u00EDficas para classes"
# ir\u00E3o sobrescrever o n\u00EDvel atribu\u00EDdo aqui para aquela classe espec\u00EDfica
# Note tamb\u00E9m que o ConsoleHandler tem um n\u00EDvel separado, limitando a
# quantidade de mensagens impressas no console.
.level = INFO

############################################################
#        Propriedades espec\u00EDficas dos handlers
# Descreve configura\u00E7\u00F5es espec\u00EDficas para cada handler.
############################################################

# Estas s\u00E3o op\u00E7\u00F5es para o FileHandler.
# A propriedade pattern indica o arquivo onde o log ser\u00E1 gravado.
#     / - o separador de caminhos
#    %t - o diret\u00F3rio tempor\u00E1rio do sistema (ex. /tmp ou C:\Temp)
#    %h - o valor da propriedade do sistema "user.home"
#    %g - um n\u00FAmero sequencial para distinguir os arquivos de log
#    %u - um n\u00FAmero \u00FAnico para resolver conflitos
#    %% - quando se deseja representar um sinal de percentagem "%"
# A propriedade formatter indica a formata\u00E7\u00E3o do log, neste caso, formato XML.
# A propriedade limit indica o tamanho m\u00E1ximo (em bytes) de cada arquivo de log.
# A propriedade count especifica o n\u00FAmero m\u00E1ximo de arquivos de log que ser\u00E3o gerados.
java.util.logging.FileHandler.pattern = %h/projeto-lattes%g.log
java.util.logging.FileHandler.count = 10
java.util.logging.FileHandler.limit = 3000000
java.util.logging.FileHandler.level = INFO
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

# Estas s\u00E3o as op\u00E7\u00F5es para o ConsoleHandler
# O n\u00EDvel de log a ser impresso no console ser\u00E1 INFO ou superior.
# O formato do log ser\u00E1 um formato de texto simples
java.util.logging.ConsoleHandler.level = INFO
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter


############################################################
# Propriedades espec\u00EDficas para classes
# Fornece controle extra para cada logger.
############################################################

# Voc\u00EA pode atribuir um n\u00EDvel espec\u00EDfico para uma classe
# particular. Neste exemplo, para a classe com.xyz.Foo,
# somente ser\u00E3o registrados os logs do n\u00EDvel SEVERE.
#com.xyz.Foo.level = SEVERE
#CadastroPessoas.level = FINEST



